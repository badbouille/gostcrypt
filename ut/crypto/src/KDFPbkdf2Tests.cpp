/**
 * @file KDFPbkdf2Tests.cpp
 * @author badbouille
 * @date 17/01/2021
 *
 * This project is released under the GNU General Public License v3.0.
 */

#include <MAC.h>
#include <KDF.h>
#include "unity.h"
#include <string>
#include "HMAC.h"
#include "KDFPbkdf2.h"
#include <MACTests.h>
#include "cryptoTests.h"

using namespace GostCrypt;

#define NUM_TEST_VECTORS 3

// TODO: note that testing Pbkdf2 with our 'test hash' XOR-0 might be the dumbest shit ever
//       THE KEY HAS NO EFFECT IN ANY WAY ON THE DIGEST, IT JUST XORS ITSELF FFS.
//       This time, it's even worse, because the even number of XORs (4096) simply anhihilates the KDF
//       by using XOR-0, any password with any salt will encrypt to fkin 0...

const KDFTestData512 kdf_pbkdf2_testvectors[NUM_TEST_VECTORS] = {
    {
        .key      = {0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf},
        .salt     = {0x6a, 0x6a, 0x6a, 0x6a, 0x6a, 0x6a, 0x6a, 0x6a, 0x6a, 0x6a, 0x6a, 0x6a, 0x6a, 0x6a, 0x6a, 0x6a},
        .expected = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        .keysize      = 16,
        .saltsize     = 16,
        .expectedsize = 16,
    },
    {
        .key      = {0x01, 0x01, 0x01, 0x01},
        .salt     = { 0 },
        .expected = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        .keysize      = 4,
        .saltsize     = 0,
        .expectedsize = 16,
    },
    {
        .key      = { 0 },
        .salt     = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                     0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
                     0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
                     0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f},
        .expected = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        .keysize      = 0,
        .saltsize     = 64,
        .expectedsize = 16,
    },
};

void test_kdf_pbkdf2_basic() {

    KDF *k = new KDFPbkdf2<HMAC<HashXOR0<16>>, 4096>();

    stdtest_kdf_basic(k, "Pbkdf2 HMAC XOR-0Padding-16", "Pbkdf2-HMAC-XOR0-16");

    delete k;
}

void test_kdf_pbkdf2_derivate() {

    KDF *k = new KDFPbkdf2<HMAC<HashXOR0<16>>, 4096>();

    stdtest_kdf_derivate(k, NUM_TEST_VECTORS, kdf_pbkdf2_testvectors);

    delete k;
}

/**
 * @file BlockCipherXORTests.cpp
 * @author badbouille
 * @date 08/11/2020
 *
 * This project is released under the GNU General Public License v3.0.
 */

#include <BlockCipher.h>
#include "unity.h"
#include <cstdint>
#include <string>
#include <BlockCipherXOR.h>
#include <BlockCipherTests.h>
#include "cryptoTests.h"

using namespace GostCrypt;

#define NUM_TEST_VECTORS 3

const BlockCipherTestData128 blockcipher_xor_testvectors[NUM_TEST_VECTORS] = {
    {
        .key      = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f},
        .input    = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f},
        .expected = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
    },
    {
        .key      = {0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef},
        .input    = {0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11},
        .expected = {0x10, 0x32, 0x54, 0x76, 0x98, 0xba, 0xdc, 0xfe, 0x10, 0x32, 0x54, 0x76, 0x98, 0xba, 0xdc, 0xfe}
    },
    {
        .key      = {0x03, 0xf7, 0xcf, 0x05, 0xaf, 0xcb, 0xfc, 0xf6, 0xe3, 0xca, 0x73, 0x5e, 0x1e, 0x84, 0x73, 0x8b},
        .input    = {0xd2, 0x9f, 0x03, 0xf1, 0xf2, 0x07, 0xca, 0xac, 0x44, 0xb6, 0x67, 0x95, 0xb7, 0x8a, 0x1a, 0xff},
        .expected = {0xd1, 0x68, 0xcc, 0xf4, 0x5d, 0xcc, 0x36, 0x5a, 0xa7, 0x7c, 0x14, 0xcb, 0xa9, 0x0e, 0x69, 0x74}
    }
};

void test_blockcipher_xor_basic() {

    BlockCipher *b = new BlockCipherXOR();

    stdtest_blockcipher_basic(b, 16, 16, 16, "XOR 128bits", "XOR128");

    delete b;
}

void test_blockcipher_xor_encrypt() {

    BlockCipher *b = new BlockCipherXOR();

    stdtest_blockcipher_encrypt128(b, NUM_TEST_VECTORS, blockcipher_xor_testvectors);

    delete b;
}

void test_blockcipher_xor_decrypt() {

    BlockCipher *b = new BlockCipherXOR();

    // since encryption is the same as decryption, the same vectors are applied
    stdtest_blockcipher_decrypt128(b, NUM_TEST_VECTORS, blockcipher_xor_testvectors);

    delete b;
}

void test_blockcipher_xor_sizechecks() {

    BlockCipher *b = new BlockCipherXOR();

    // checking with an invalid size
    stdtest_blockcipher_sizechecks(b, b->GetBlockSize()+b->GetKeySize());

    delete b;
}
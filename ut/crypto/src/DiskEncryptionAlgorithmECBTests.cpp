/**
 * @file DiskEncryptionAlgorithmECBTests.cpp
 * @author badbouille
 * @date 08/11/2020
 *
 * This project is released under the GNU General Public License v3.0.
 */

#include "DiskEncryptionAlgorithm.h"
#include "DiskEncryptionAlgorithmECB.h"
#include "DiskEncryptionAlgorithmTests.h"
#include "BlockCipherXOR.h"
#include "unity.h"
#include <cstdint>
#include <string>
#include "cryptoTests.h"

using namespace GostCrypt;

#define NUM_TEST_VECTORS 7

/* Encryption and Decryption test vectors */
const DiskEncryptionAlgorithmTestData520 diskencryptionalgorithm_ecb_xor_testvectors[NUM_TEST_VECTORS] = {
    {   // simple encryption (1 sector of std size)
        .key      = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f},
        .input    = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f},
        .expected = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        .inputsize    = 16,
        .sectornum    = 1,
        .sectorsize   = 16,
        .sectoroffset = 0
    },
    {   // simple encryption with sector number
        .key      = {0x03, 0xf7, 0xcf, 0x05, 0xaf, 0xcb, 0xfc, 0xf6, 0xe3, 0xca, 0x73, 0x5e, 0x1e, 0x84, 0x73, 0x8b},
        .input    = {0xd2, 0x9f, 0x03, 0xf1, 0xf2, 0x07, 0xca, 0xac, 0x44, 0xb6, 0x67, 0x95, 0xb7, 0x8a, 0x1a, 0xff},
        .expected = {0xd1, 0x68, 0xcc, 0xf4, 0x5d, 0xcc, 0x36, 0x5a, 0xa7, 0x7c, 0x14, 0xcb, 0xa9, 0x0e, 0x69, 0x74},
        .inputsize    = 16,
        .sectornum    = 1,
        .sectorsize   = 16,
        .sectoroffset = 114 // this is the value tested. It is not used in ECB mode but these vectors are a guideline for other algorithms
    },
    {   // bigger sector encryption (2*std)
        .key      = {0x03, 0xf7, 0xcf, 0x05, 0xaf, 0xcb, 0xfc, 0xf6, 0xe3, 0xca, 0x73, 0x5e, 0x1e, 0x84, 0x73, 0x8b},
        .input    = {0xd2, 0x9f, 0x03, 0xf1, 0xf2, 0x07, 0xca, 0xac, 0x44, 0xb6, 0x67, 0x95, 0xb7, 0x8a, 0x1a, 0xff,
                     0x4b, 0xd4, 0xac, 0x16, 0xf6, 0xc8, 0x08, 0xd6, 0x97, 0xe5, 0x3a, 0x93, 0xab, 0x80, 0x04, 0x6c},
        .expected = {0xd1, 0x68, 0xcc, 0xf4, 0x5d, 0xcc, 0x36, 0x5a, 0xa7, 0x7c, 0x14, 0xcb, 0xa9, 0x0e, 0x69, 0x74,
                     0x48, 0x23, 0x63, 0x13, 0x59, 0x03, 0xf4, 0x20, 0x74, 0x2f, 0x49, 0xcd, 0xb5, 0x04, 0x77, 0xe7},
        .inputsize    = 32,
        .sectornum    = 1,
        .sectorsize   = 32, // testing a bigger sector size
        .sectoroffset = 27
    },
    {   // multiple sector encryption (2 std sectors) (should give same results as before in ECB)
        .key      = {0x03, 0xf7, 0xcf, 0x05, 0xaf, 0xcb, 0xfc, 0xf6, 0xe3, 0xca, 0x73, 0x5e, 0x1e, 0x84, 0x73, 0x8b},
        .input    = {0xd2, 0x9f, 0x03, 0xf1, 0xf2, 0x07, 0xca, 0xac, 0x44, 0xb6, 0x67, 0x95, 0xb7, 0x8a, 0x1a, 0xff,
                     0x4b, 0xd4, 0xac, 0x16, 0xf6, 0xc8, 0x08, 0xd6, 0x97, 0xe5, 0x3a, 0x93, 0xab, 0x80, 0x04, 0x6c},
        .expected = {0xd1, 0x68, 0xcc, 0xf4, 0x5d, 0xcc, 0x36, 0x5a, 0xa7, 0x7c, 0x14, 0xcb, 0xa9, 0x0e, 0x69, 0x74,
                     0x48, 0x23, 0x63, 0x13, 0x59, 0x03, 0xf4, 0x20, 0x74, 0x2f, 0x49, 0xcd, 0xb5, 0x04, 0x77, 0xe7},
        .inputsize    = 32,
        .sectornum    = 2,  // testing multiple sectors
        .sectorsize   = 16,
        .sectoroffset = 27
    },
    {   // unaligned encryption (1 sector of NOT std size) (ciphertext stealing test)
        .key      = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f},
        .input    = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10},
        .expected = {0x10, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x00},
        .inputsize    = 17,
        .sectornum    = 1,
        .sectorsize   = 17,
        .sectoroffset = 255
    },
    {   // unaligned encryption of multiple unaligned sectors
        .key      = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f},
        .input    = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                     0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
                     0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f},
        .expected = {0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28,
                     0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18},
        .inputsize    = 48,
        .sectornum    = 2,
        .sectorsize   = 24,
        .sectoroffset = 172
    },
    {   // same as before but aligned (easy test to show how previous result is different when aligned (CS3))
        .key      = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f},
        .input    = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                     0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
                     0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f},
        .expected = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                     0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,
                     0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20},
        .inputsize    = 48,
        .sectornum    = 3,
        .sectorsize   = 16,
        .sectoroffset = 172
    },
};

void test_diskencryptionalgorithm_ecb_xor_basic() {

    DiskEncryptionAlgorithm *a = new DiskEncryptionAlgorithmECB<BlockCipherXOR>();

    stdtest_diskencryptionalgorithm_basic(a, 16, "ECB_{XOR128}");

    delete a;
}

void test_diskencryptionalgorithm_ecb_xor_encrypt() {

    DiskEncryptionAlgorithm *a = new DiskEncryptionAlgorithmECB<BlockCipherXOR>();

    try
    {
        stdtest_diskencryptionalgorithm_encrypt(a, NUM_TEST_VECTORS, diskencryptionalgorithm_ecb_xor_testvectors);
    } catch (GostCryptException &e) {
        TEST_FAIL_MESSAGE(e.what());
    }

    delete a;
}

void test_diskencryptionalgorithm_ecb_xor_decrypt() {

    DiskEncryptionAlgorithm *a = new DiskEncryptionAlgorithmECB<BlockCipherXOR>();

    try
    {
        stdtest_diskencryptionalgorithm_decrypt(a, NUM_TEST_VECTORS, diskencryptionalgorithm_ecb_xor_testvectors);
    } catch (GostCryptException &e) {
        TEST_FAIL_MESSAGE(e.what());
    }

    delete a;
}

void test_diskencryptionalgorithm_ecb_xor_sizechecks() {

    DiskEncryptionAlgorithm *a = new DiskEncryptionAlgorithmECB<BlockCipherXOR>();

    // checking with an invalid size
    stdtest_diskencryptionalgorithm_sizechecks(a, 12);

    delete a;
}

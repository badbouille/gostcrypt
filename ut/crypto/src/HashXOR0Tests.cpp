/**
 * @file HashXOR0Tests.cpp
 * @author badbouille
 * @date 09/12/2020
 *
 * This project is released under the GNU General Public License v3.0.
 */

#include <Hash.h>
#include <HashXOR0.h>
#include "HashTests.h"
#include "unity.h"
#include <cstdint>
#include <string>
#include "cryptoTests.h"

using namespace GostCrypt;

#define NUM_TEST_VECTORS 5

const HashTestData128 hash_xor0_testvectors[NUM_TEST_VECTORS] = {
    {
        .text     = {0},
        .length   = 0,
        .expected = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
    },
    {
        .text     = {0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef},
        .length   = 8,
        .expected = {0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
    },
    {
        .text     = {0xd1, 0x68, 0xcc, 0xf4, 0x5d, 0xcc, 0x36, 0x5a, 0xa7, 0x7c, 0x14, 0xcb, 0xa9, 0x0e, 0x69, 0x74},
        .length   = 16,
        .expected = {0xd1, 0x68, 0xcc, 0xf4, 0x5d, 0xcc, 0x36, 0x5a, 0xa7, 0x7c, 0x14, 0xcb, 0xa9, 0x0e, 0x69, 0x74}
    },
    {
        .text     = {0x03, 0xf7, 0xcf, 0x05, 0xaf, 0xcb, 0xfc, 0xf6, 0xe3, 0xca, 0x73, 0x5e, 0x1e, 0x84, 0x73, 0x8b,
                     0xd2, 0x9f, 0x03, 0xf1, 0xf2, 0x07, 0xca, 0xac, 0x44, 0xb6, 0x67, 0x95, 0xb7, 0x8a, 0x1a, 0xff},
        .length   = 32,
        .expected = {0xd1, 0x68, 0xcc, 0xf4, 0x5d, 0xcc, 0x36, 0x5a, 0xa7, 0x7c, 0x14, 0xcb, 0xa9, 0x0e, 0x69, 0x74}
    },
    {
        .text     = {0x03, 0xf7, 0xcf, 0x05, 0xaf, 0xcb, 0xfc, 0xf6, 0xe3, 0xca, 0x73, 0x5e, 0x1e, 0x84, 0x73, 0x8b,
                     0xd2, 0x9f, 0x03, 0xf1, 0xf2, 0x07, 0xca, 0xac, 0x44, 0xb6, 0x67, 0x95, 0xb7, 0x8a},
        .length   = 30,
        .expected = {0xd1, 0x68, 0xcc, 0xf4, 0x5d, 0xcc, 0x36, 0x5a, 0xa7, 0x7c, 0x14, 0xcb, 0xa9, 0x0e, 0x73, 0x8b}
    }
};

void test_hash_xor0_basic() {

    Hash *h = new HashXOR0<16>();

    stdtest_hash_basic(h, 16, 16, "XOR-0Padding-16", "XOR0-16");

    delete h;
}

void test_hash_xor0_process() {

    Hash *h = new HashXOR0<16>();

    stdtest_hash_process(h, NUM_TEST_VECTORS, hash_xor0_testvectors);

    delete h;
}

void test_hash_xor0_processmult() {

    Hash *h = new HashXOR0<16>();

    stdtest_hash_processmult(h, NUM_TEST_VECTORS, hash_xor0_testvectors);

    delete h;
}

void test_hash_xor0_sizechecks() {

    Hash *h = new HashXOR0<16>();

    stdtest_hash_sizechecks(h);

    delete h;
}
